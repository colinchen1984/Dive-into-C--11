<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.5//EN">
<book>
    <bookinfo>
    <title>Programming in C++11</title>

    <authorgroup>
    <author>
    <firstname>Pedro</firstname> <surname>Larroy</surname>
    <affiliation>
    <address><email>pedro.larroy at gmail</email></address>
    </affiliation>
    </author>
    </authorgroup>

    <!--
    <revhistory>
        <revision>
        <revnumber role="rcs">$Revision: 1.35 $</revnumber>
            <date role="rcs">$Date: 2003/07/26 19:57:49 $</date>
            <revremark>DocBook Edition</revremark>
        </revision>
    </revhistory>
    -->

   <Abstract>
     <para>Using the new features of C++ effectively<application></application>,
     </para>
   </Abstract>

</bookinfo>
<toc></toc>

<chapter id="intro">
    <Title>Introduction</Title>

    <Para>
    Welcome, reader.
    </Para>

    <Para>
    You might find useful the list of docbook tags:
    <ulink url="http://www.docbook.org/tdg/en/html/part2.html">http://www.docbook.org/tdg/en/html/part2.html</ulink>. You can use a simple text editor to contribute or use any docbook authoring tool, given that you don't mess the formatting or indentation of the file.
    </Para>

    <para>
    Some of the new features of C++11 make a big impact in the way we will write programs, allowing more concise code and more powerful standarized features across platforms.
    </para>
    
    <para>
    For compiling the examples, g++ &gt; = 4.6 or Visual Studio 2010 should be able to compile most of them. <ulink url="http://wiki.apache.org/stdcxx/C%2B%2B0xCompilerSupport">Here is a nice table of C++11 compiler support</ulink>.
    </para>

    <Para>
    Copyright (c) 2011 by Pedro Larroy. This document can be distributed according to the terms of the GNU Free Documentation License. You can obtain a <ulink url="http://www.gnu.org/copyleft/fdl.html">copy of the GNUFDL license in this link</ulink>.
    </Para>

</chapter> <!-- end of intro -->

<chapter id="ranges">
    <Title>Range based iterators</Title>
    <para>
    We can use range based iteration in for loops to reduce noise and increase redability, compare the C style loop like: 
    </para>
    <programlisting>
<![CDATA[
    vector<int> vi;
    vi.push_back(5);
    vi.push_back(4);
    vi.push_back(3);
    for(vector<int>::iterator i = vi.begin(); i != vi.end(); ++i)
        cout << *i << endl;
    ]]>
</programlisting>

    <para>
    With the C++11 style, range based loop and static vector initializer:
    </para>

    <programlisting>
<![CDATA[
    vector<int> vi = {5, 4, 3};
    for (auto i: vi) 
        cout << i << endl;
    ]]>
</programlisting>

    <para>
    The two code snippet are completely equivalent, but the former is clearer, terser, more semantic, and you don't have to carefully inspect the termination condition to check if we are really iterating over the whole range or one element less.
    </para>
</chapter>




<chapter id="lambdas">
    <Title>Lambda expressions</Title>
    <para>
    Lambda expressions, also called anonymous functions are functions without an identifier.
    </para>

    <example><title>Printing the elements of a vector with a lambda</title>
    <programlisting>
<![CDATA[
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main(int argc, char *argv[])
{
    vector<int> vi = {5, 4 ,3};
    for_each(vi.begin(), vi.end(), [](int i) {
        cout << i << endl;
    });
}
]]>
    </programlisting>
    <para>
    With output:
    </para>
    <screen>
5
4
3
    </screen>
    </example>

    <para>
    The above example makes the code more concise versus a traditional loop since we can omit the index variable and the conditions, which reduces the chance of introducing bugs and improves readability.
    </para>

    <para>
    The lambda expression is composed of the declaration, and a compound statment. In our example the declaration is:
<programlisting>
<![CDATA[
[](int i)
]]>
</programlisting>
    The syntax of a lambda has three parts: the capture list [], the parameters (int i), and the optional return type. Which we ommited. 
    In lambdas we can capture variables with automatic storage either explicitly, by listing them in the capture list, or implicitly by using them and letting the compiler figure out.

    An equivalent declaration would have been:
    [=](int i) -> void

    </para>

    <para>
    Capturing variables:

    If we specify = in the capture list, variables are captured by value, which means that the lambda will recieve a copy of this variable, and modifications won't be visible outside the scope of the lambda.

    If we want to capture by reference, we can either change the capture default to &amp;, or explicitly capture the variable. If we have specified the default capture mode, we should not repeat it in the variables again

    <itemizedlist>
    <listitem><para>[&amp;] implicitly captures by reference</para></listitem>
    <listitem><para>[&amp;i] explicitly capture i by reference</para></listitem>
    <listitem><para>[&amp;,i] capture default by reference, explicitly capture i</para></listitem>
    <listitem><para>[&amp;,&amp;i] Error</para></listitem>
    <listitem><para>[=,this] Error</para></listitem>
    <listitem><para>[this, =i] Capture this, capture i by value</para></listitem>
    </itemizedlist>
    </para>


    <example><title>Calculating the sum of values</title>
    <programlisting>
    <![CDATA[
vector<int> vi = {1, 2, 3};

size_t sum = 0;

for_each(vi.begin(), vi.end(), [&](int i) {
    sum += i;
});

cout << sum << endl;
    ]]>
    </programlisting>
    <para>
    In this example we calculate the sum of values, which is 6, by accessing the sum variable by reference.
    </para>
    </example>


    <para>
    Technically, a lambda is equivalent to a functor that the compiler will generate with the captures as members. For example:

    </para>

    <programlisting>
    <![CDATA[
[&sum](int i) {
    sum += i;
};
    ]]>
    </programlisting>
    
    <para>
    Is equivalent to:
    </para>

    <programlisting>
    <![CDATA[
struct X {
    X(int& sum) :
        sum(sum)
    {}

    void operator()(int i)
    {
        sum += i;
    }   

    int& sum;
};
    ]]>
    </programlisting>



</chapter>


<chapter id="auto">
    <title>auto keyword</title>
    <para>
    In C or previous versions of C++, they keyword <emphasis>auto</emphasis> was used as storage specifier. Storage specifiers allow the compiler to decide object linkage (internal or external) and if the variable is to be stored in memory or a register. Auto was used to tell the compiler that the variable had automatic storage. Which means that the variable is deleted after the block is finished. Automatic storage is, and has been the default. In C++11 the auto keyword is used to let the compiler <emphasis>infer types</emphasis>.
    </para>

    <para>
    The <emphasis>auto</emphasis> keyword tells the compiler that the type of an object should be deduced.
    </para>

    <example><title>Letting the compiler deduce the type of a variable with auto</title>
    <programlisting>
    <![CDATA[
auto* i = new auto(1);
    ]]>
    </programlisting>
    <para>
    In this case the compiler will create the i variable with type <emphasis>int</emphasis>.
    </para>
    </example>

    <para>
    The previous example is not very interesting, let's see how <emphasis>auto</emphasis> can help in the typical loop when accessing an STL container:

    <example><title>Letting the compiler deduce the type of an iterator with auto</title>
    <programlisting>
    <![CDATA[
    map<int, string> mi;
    mi.insert(make_pair(1,"one"));
    mi.insert(make_pair(2,"two"));
    mi.insert(make_pair(3,"three"));

    for(auto i = mi.begin(); i != mi.end(); ++i)
        cout << i->first << " " << i->second << endl;
    ]]>
    </programlisting>
    <para>
    In this example, using auto allows us to save declaring the type of the iterator, which usually becomes tedious, even for the most basic types.
    </para>
    </example>

    <para>
    The <emphasis>auto</emphasis> type specifier becomes crucial if we want to store a lambda to pass it around afterwards, since the type of a lambda is opaque for the compiler.
    </para>

    <example><title>Storing a lambda with the help of auto</title>
    <programlisting>
    <![CDATA[
auto lambda = [](int i) -> int { return i * 2; };
int a = 5;
int b = lambda(a);

cout << b << endl;
    ]]>
    </programlisting>
    <para>
    Which as you guessed, prints the value 10. In this manner, we can store a lambda for reusing it several times, for example passing it several times to the std::for_each function.
    </para>
    </example>

</chapter>

<chapter id="staticassert">
    <title>Compile-time checks with static_assert</title>
    <para>
    The keyword static_assert will allow us to check if an integral constant expression is true when converted to bool at compile time. If the first argument of static_assert fails, the compiler can print the diagnostic message and fail.
    </para>

    <example><title>Compile time check with static_assert</title>
    <programlisting>
    <![CDATA[
static_assert(sizeof(int) == 4, "int size is not 32 bits");
    ]]>
    </programlisting>
    </example>

    <para>
    In previous C++ versions the way of making a compile assertions was a trick consisting of specializing a template only for true values. As explained in the book: C++ Template Metaprogramming, a book by David Abrahams and Aleksey Gurtovoy. The static_assert keyword allows us to simplify this task.
    </para>
</chapter>


<chapter id="references">
    <title>References</title>
    <para>

    <itemizedlist>
    <listitem><para><ulink url="http://www.codeproject.com/KB/cpp/Cpp11_Standard_part1.aspx">C++11 at a Glance</ulink></para></listitem>
    <listitem><para><ulink url="http://www2.research.att.com/~bs/C++0xFAQ.html">C++0x FAQ</ulink></para></listitem>
    <listitem><para><ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/">C++ Standards Comittee Papers</ulink></para></listitem>
    <listitem><para><ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html#Move_Semantics">Move semantics</ulink></para></listitem>
    <listitem><para><ulink url="http://www.nwcpp.org/images/stories/lambda.pdf">Herb Sutter slides on lambdas</ulink></para></listitem>
    <listitem><para><ulink url="http://herbsutter.com/elements-of-modern-c-style/">Elements of modern C++ style</ulink></para></listitem>
    <listitem><para><ulink url="http://www.corensic.com/Learn/Resources/ConcurrencyTutorialPartOne.aspx">Corensic's C++11 Concurrency Series</ulink></para></listitem>
    <listitem><para><ulink url="http://en.cppreference.com/w/cpp">C++ Reference</ulink></para></listitem>
    </itemizedlist>



    </para>

</chapter>

</book>
