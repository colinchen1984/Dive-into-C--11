<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.5//EN">
<book>
    <bookinfo>
    <title>Programming in C++11</title>

    <authorgroup>
    <author>
    <firstname>Pedro</firstname> <surname>Larroy</surname>
    <affiliation>
    <address><email>pedro.larroy at gmail</email></address>
    </affiliation>
    </author>
    </authorgroup>

    <!--
    <revhistory>
        <revision>
        <revnumber role="rcs">$Revision: 1.35 $</revnumber>
            <date role="rcs">$Date: 2003/07/26 19:57:49 $</date>
            <revremark>DocBook Edition</revremark>
        </revision>
    </revhistory>
    -->

   <Abstract>
     <para>Using the new features of C++ effectively<application></application>,
     </para>
   </Abstract>

</bookinfo>
<toc></toc>

<chapter id="intro">
    <Title>Introduction</Title>

    <Para>
    Welcome, reader.
    </Para>

    <Para>
    You might find useful the list of docbook tags:
    <ulink url="http://www.docbook.org/tdg/en/html/part2.html">http://www.docbook.org/tdg/en/html/part2.html</ulink>. You can use a simple text editor to contribute or use any docbook authoring tool, given that you don't mess the formatting or indentation of the file.
    </Para>

    <para>
    Some of the new features of C++11 make a big impact in the way we will write programs, allowing more concise code and more powerful standarized features across platforms.
    </para>

    <Para>
    Copyright (c) 2011 by Pedro Larroy. This document can be distributed according to the terms of the GNU Free Documentation License. You can obtain a <ulink url="http://www.gnu.org/copyleft/fdl.html">copy of the GNUFDL license in this link</ulink>.
    </Para>

</chapter> <!-- end of intro -->



<chapter id="lambdas">
    <Title>Lambda expressions</Title>
    <para>
    Lambda expressions, also called anonymous functions are functions without an identifier.
    </para>

    <example><title>Printing the elements of a vector with a lambda</title>
    <programlisting>
<![CDATA[
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main(int argc, char *argv[])
{
    vector<int> vi;
    vi.push_back(5);
    vi.push_back(4);
    vi.push_back(3);
    for_each(vi.begin(), vi.end(), [](int i) {
        cout << i << endl;
    });
}
]]>
    </programlisting>
    <para>
    With output:
    </para>
    <screen>
5
4
3
    </screen>
    </example>

    <para>
    The above example makes the code more concise versus a traditional loop since we can omit the index variable and the conditions, which reduces the chance of introducing bugs and improves readability.
    </para>

    <para>
    The lambda expression is composed of the declaration, and a compound statment. In our example the declaration is:
<programlisting>
<![CDATA[
[](int i)
]]>
</programlisting>
    The syntax of a lambda has three parts: the capture list [], the parameters (int i), and the optional return type. Which we ommited. 
    In lambdas we can capture variables with automatic storage either explicitly, by listing them in the capture list, or implicitly by using them and letting the compiler figure out.

    An equivalent declaration would have been:
    [=](int i) -> void

    </para>

    <para>
    Capturing variables:

    By default, variables are captured by value, which means that the lambda will recieve a copy of this variable, and modifications won't be visible outside the scope of the lambda.

    If we want to capture by reference, we can either change the capture default to &amp;, or explicitly capture the variable. If we have specified the default capture mode, we should not repeat it in the variables again

    <itemizedlist>
    <listitem><para>[&amp;] implicitly captures by reference</para></listitem>
    <listitem><para>[&amp;i] explicitly capture i by reference</para></listitem>
    <listitem><para>[&amp;,i] capture default by reference, explicitly capture i</para></listitem>
    <listitem><para>[&amp;,&amp;i] Error</para></listitem>
    <listitem><para>[=,this] Error</para></listitem>
    <listitem><para>[this, =i] Capture this, capture i by value</para></listitem>
    </itemizedlist>
    </para>

    <para>
    </para>


</chapter>

</book>
