<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.5//EN">
<book>
    <bookinfo>
    <title>Programming in C++11</title>

    <authorgroup>
    <author>
    <firstname>Pedro</firstname> <surname>Larroy</surname>
    <affiliation>
    <address><email>pedro.larroy at gmail</email></address>
    </affiliation>
    </author>
    </authorgroup>

    <!--
    <revhistory>
        <revision>
        <revnumber role="rcs">$Revision: 1.35 $</revnumber>
            <date role="rcs">$Date: 2003/07/26 19:57:49 $</date>
            <revremark>DocBook Edition</revremark>
        </revision>
    </revhistory>
    -->

   <Abstract>
     <para>Using the new features of C++ effectively<application></application>,
     </para>
   </Abstract>

</bookinfo>
<toc></toc>

<chapter id="intro">
    <Title>Introduction</Title>

    <Para>
    Welcome, reader.
    </Para>

    <Para>
    You might find useful the list of docbook tags:
    <ulink url="http://www.docbook.org/tdg/en/html/part2.html">http://www.docbook.org/tdg/en/html/part2.html</ulink>. You can use a simple text editor to contribute or use any docbook authoring tool, given that you don't mess the formatting or indentation of the file.
    </Para>

    <para>
    Some of the new features of C++11 make a big impact in the way we will write programs, allowing more concise code and more powerful standarized features across platforms.
    </para>

    <Para>
    Copyright (c) 2011 by Pedro Larroy. This document can be distributed according to the terms of the GNU Free Documentation License. You can obtain a <ulink url="http://www.gnu.org/copyleft/fdl.html">copy of the GNUFDL license in this link</ulink>.
    </Para>

</chapter> <!-- end of intro -->



<chapter id="lambdas">
    <Title>Lambda expressions</Title>
    <para>
    Lambda expressions, also called anonymous functions are functions without an identifier.
    </para>

    <example><title>Printing the elements of a vector with a lambda</title>
    <programlisting>
<![CDATA[
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main(int argc, char *argv[])
{
    vector<int> vi;
    vi.push_back(5);
    vi.push_back(4);
    vi.push_back(3);
    for_each(vi.begin(), vi.end(), [](int i) {
        cout << i << endl;
    });
}
]]>
    </programlisting>
    <para>
    With output:
    </para>
    <screen>
5
4
3
    </screen>
    </example>

    <para>
    The above example makes the code more concise versus a traditional loop since we can omit the index variable and the conditions, which reduces the chance of introducing bugs and improves readability.
    </para>


</chapter>

</book>
